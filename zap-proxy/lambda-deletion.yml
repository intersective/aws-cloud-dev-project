AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda function with a scheduled CloudWatch event

Parameters:
  TeamName:
    Type: String
    Default: "team-1"
    Description: Team name
  Client:
    Type: String
    Default: "skillsbuild"
    Description: WBLA or IBM
  PAT:
    Type: String
    Description: Github PAT
  HoursDuration:
    Type: Number
    Description: Number of hours duration before infra shutdown.
    Default: 10

Resources:
  DeleteStackLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          TEAM_NAME: !Ref TeamName
          CLIENT: !Ref Client
          PAT: !Ref PAT
          HOURS_DURATION: !Ref HoursDuration
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          const https = require("https");

          const cloudformation = new AWS.CloudFormation();

          exports.handler = async (event) => {
            try {
              const data = await cloudformation
                .describeStacks({ StackName: `${process.env.TEAM_NAME}-${process.env.CLIENT}` })
                .promise();
              const stackCreationTime = new Date(data.Stacks[0].CreationTime);
              const currentTime = new Date();

              const timeDiff = (currentTime - stackCreationTime) / (1000 * 60 * 60);

              // adjust how many hours here; 1 hour for now just testing
              console.log("Time difference: ", timeDiff);
              if (timeDiff > parseInt(process.env.HOURS_DURATION,10)) {
                await doPostRequest();
              } else {
                console.log("Less than 10 hours have passed since stack creation.");
              }
            } catch (error) {
              console.error("Error:", error);
              throw error;
            }
          };

          async function doPostRequest() {
            const data = JSON.stringify({
              ref: "feat/workflow",
              inputs: {
                ACTION: "shutdown",
                CLIENT: process.env.CLIENT,
                TEAM_NAME: process.env.TEAM_NAME,
                PAT: process.env.PAT,
              },
            });

            const options = {
              hostname: "api.github.com",
              port: 443,
              path: "/repos/intersective/aws-cloud-dev-project/actions/workflows/83200993/dispatches",
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Content-Length": data.length,
                Authorization: `Bearer ${process.env.PAT}`,
                "X-GitHub-Api-Version": "2022-11-28",
                Accept: "application/vnd.github+json",
                "user-agent": "node.js",
              },
            };

            return new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                let responseBody = "";
                res.on("data", (chunk) => (responseBody += chunk));
                res.on("end", () => {
                  console.log("Response:", responseBody);
                  resolve(responseBody);
                });
              });

              req.on("error", (error) => {
                console.error("Error:", error);
                reject(error);
              });

              req.write(data);
              req.end();
            });
          }

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Lambda on a schedule"
      ScheduleExpression: "rate(5 minutes)" # Triggers every 5 minutes
      State: ENABLED
      Targets:
        - Arn: !GetAtt DeleteStackLambda.Arn
          Id: "DeleteStackLambdaTarget"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteStackLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CloudWatchEventRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt DeleteStackLambda.Arn

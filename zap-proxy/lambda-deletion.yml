AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda function with a scheduled CloudWatch event

Parameters:
  TeamName:
    Type: String
    Default: "team-1"
    Description: Team name
  Client:
    Type: String
    Default: "skillsbuild"
    Description: WBLA or IBM

Resources:
  DeleteStackLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          TEAM_NAME: !Ref TeamName
          CLIENT: !Ref Client
      Code:
        ZipFile: |
          const https = require('https');

          exports.handler = async (event) => {
              const data = JSON.stringify({
                  "ref": "feat/workflow",
                  "inputs":{
                      "ACTION": "shutdown",
                      "CLIENT": process.env.CLIENT,
                      "TEAM_NAME": process.env.TEAM_NAME
                  }
              });
              
              const options = {
                  hostname: 'api.github.com',
                  port: 443,
                  path: '/repos/intersective/aws-cloud-dev-project/actions/workflows/83200993/dispatches',
                  method: 'POST',
                  headers: {
                      'Authorization': 'Bearer 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',
                      'X-GitHub-Api-Version': '2022-11-28',
                      'Accept': 'application/vnd.github+json'
                  }
              };
              
              return new Promise((resolve, reject) => {
                  const req = https.request(options, (res) => {
                      let responseBody = '';
                      res.on('data', (chunk) => responseBody += chunk);
                      res.on('end', () => {
                          console.log("Response:", responseBody);
                          resolve({
                              statusCode: 200,
                              body: JSON.stringify('Success!')
                          });
                      });
                  });
              
                  req.on('error', (error) => {
                      console.error("Error:", error);
                      reject({
                          statusCode: 500,
                          body: JSON.stringify('Error')
                      });
                  });
              
                  req.write(data);
                  req.end();
              });
          };

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "arn:aws:logs:*:*:*"

Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt DeleteStackLambda.Arn

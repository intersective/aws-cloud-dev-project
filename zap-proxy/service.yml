AWSTemplateFormatVersion: "2010-09-09"
Description: An example service that deploys in AWS VPC networking mode
  on AWS Fargate. Service runs with networking in public
  subnets and public IP addresses

Parameters:
  VpcId:
    Type: String
    Description: The VPC that the service is running inside of
  PublicSubnetIds:
    # Type: String
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of public subnet ID's to put the load balancer and tasks in
  ClusterName:
    Type: String
    Description: The name of the ECS cluster into which to launch capacity.
  ECSTaskExecutionRole:
    Type: String
    Description: The role used to start up an ECS task
  ServiceName:
    Type: String
    Default: web
    Description: A name for the service
  AppImageUrl:
    Type: String
    Default: ghcr.io/zaproxy/zaproxy:stable
    Description:
      The url of a docker image that contains the application process that
      will handle the traffic for this service
  NginxImageUrl:
    Type: String
    Default: 510645120987.dkr.ecr.us-east-1.amazonaws.com/nginx:latest
    Description: The url of a docker image that provides the NGINX reverse proxy
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port that the application expects traffic on
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  RootDomainName:
    Type: String
    Default: pcloud.practeraco.de
    Description: The root domain name (e.g., example.com)
  SubDomainName:
    Type: String
    Default: zap.pcloud.practeraco.de
    Description: The subdomain name (e.g., app.example.com)
  SSLCertificateArn:
    Type: String
    Description: ARN of the existing certificate.
  TeamName:
    Type: String
    Default: "team-1"
    Description: Team name
  Client:
    Type: String
    Default: "skillsbuild"
    Description: WBLA or IBM

Resources:
  # SSL Certificate for the subdomain
  # SSLCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref SubDomainName
  #     ValidationMethod: DNS
  #     # If you want to cover both root and subdomain:
  #     SubjectAlternativeNames:
  #       - !Ref 

#  Route 53 record set to point the subdomain to the ELB
  SubDomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${RootDomainName}."
      Name: !Ref SubDomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt "PublicLoadBalancer.CanonicalHostedZoneID"
        DNSName: !GetAtt "PublicLoadBalancer.DNSName"

  # The task definition. This is a simple metadata description of what
  # container(s) to run, and what resource requirements the task has
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        # NGINX sidecar for the task
        - Name: nginx
          Image: !Ref NginxImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref NginxLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub "${ServiceName}/nginx"
        # Application container
        - Name: app
          Image: !Ref AppImageUrl
          User: "zap"
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          Command:
            - zap-webswing.sh
          Environment:
            - Name: ZAP_PORT
              Value: 8080
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub "${ServiceName}/app"

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    # Avoid race condition between ECS service creation and associating
    # the target group with the LB
    DependsOn: PublicLoadBalancerListener
    Properties:
      CapacityProviderStrategy: 
        - Base: 1
          Weight: 1
          CapacityProvider: "FARGATE_SPOT"
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      # LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref PublicSubnetIds
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      EnableExecuteCommand: true
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref ServiceTargetGroup

  # Security group that limits network access
  # to the task
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for service
      VpcId: !Ref VpcId

  # Keeps track of the list of tasks for the service
  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${TeamName}-${Client}-target-group
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
      Matcher:
        HttpCode: 200-499
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0

  # A public facing load balancer, this is used as ingress for
  # public facing internet traffic.
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow access to public facing ALB from any IP address
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${TeamName}-${Client}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: "HTTP"

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ServiceTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref "PublicLoadBalancer"
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn

  # Open up the service's security group to traffic originating
  # from the security group of the load balancer.
  ServiceIngressfromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"

  # This log group stores the stdout logs from the app
  AppLogGroup:
    Type: AWS::Logs::LogGroup

  # This log group stores the access logs from NGINX
  NginxLogGroup:
    Type: AWS::Logs::LogGroup

  # CyberSecurityCDN:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       Aliases:
  #         - !Sub ${SubDomainName}
  #       Comment: !Sub "Cloudfront Origin identity for ${SubDomainName}"
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #           - OPTIONS
  #           - PUT
  #           - POST
  #           - PATCH
  #           - DELETE
  #         CachedMethods:
  #           - HEAD
  #           - GET
  #           - OPTIONS
  #         Compress: true
  #         DefaultTTL: 0 # in seconds
  #         ForwardedValues:
  #           Cookies:
  #             Forward: all
  #           QueryString: true
  #           Headers: ["*"]
  #         MaxTTL: 0 # in seconds
  #         MinTTL: 0 # in seconds
  #         TargetOriginId: !Sub ${SubDomainName}
  #         ViewerProtocolPolicy: "redirect-to-https"
  #       Enabled: true
  #       HttpVersion: http2
  #       IPV6Enabled: true
  #       Origins:
  #         - Id: !Sub ${SubDomainName}
  #           DomainName: !GetAtt "PublicLoadBalancer.DNSName"
  #           CustomOriginConfig:
  #             HTTPPort: 80
  #             HTTPSPort: 443
  #             OriginProtocolPolicy: https-only
  #       PriceClass: "PriceClass_All"
  #       ViewerCertificate:
  #         AcmCertificateArn: !Ref SSLCertificateArn
  #         MinimumProtocolVersion: "TLSv1.2_2021" # OLD VALUE:'TLSv1.2_2019'
  #         SslSupportMethod: "sni-only"

  # Route53RecordV2:
  #   Type: "AWS::Route53::RecordSetGroup"
  #   Properties:
  #     HostedZoneName: !Sub "${RootDomainName}."
  #     RecordSets:
  #       - Name: !Sub ${SubDomainName}
  #         Type: CNAME
  #         TTL: "3200"
  #         ResourceRecords:
  #           - !GetAtt "CyberSecurityCDN.DomainName"
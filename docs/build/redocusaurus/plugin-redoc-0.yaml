openapi: 3.1.0
info:
  title: Cloud Developer Project - OpenAPI 3.1
  description: This is a sample crud API for a user documentation system.
  contact:
    email: support@practera.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Update with your doc URL
  url: http://swagger.io
servers:
  - url: https://serverurl
tags:
  - name: post
    description: The user doc
paths:
  /post:
    put:
      tags:
        - post
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: updatePost
      requestBody:
        description: Update an existent post in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
        '405':
          description: Validation exception
      security:
        - postdatabase_auth:
            - write:posts
            - read:posts
    post:
      tags:
        - post
      summary: Add a new post to the database
      description: Add a new post to the database
      operationId: addPost
      requestBody:
        description: Create a new post in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '405':
          description: Invalid input
      security:
        - postdatabase_auth:
            - write:posts
            - read:posts
  /posts:
    get:
      tags:
        - post
      summary: Get All Posts
      description: Returns all post
      operationId: getPosts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
            application/xml:
              schema:
                $ref: '#/components/schemas/Posts'
        '400':
          description: No posts
      security:
        - api_key: []
        - postdatabase_auth:
            - write:posts
            - read:posts
  /post/{postId}:
    get:
      tags:
        - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
      security:
        - api_key: []
        - postdatabase_auth:
            - write:posts
            - read:posts
    post:
      tags:
        - post
      summary: Updates a post in the database with form data
      description: ''
      operationId: updatePostWithForm
      parameters:
        - name: postId
          in: path
          description: ID of post that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of post that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of post that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - postdatabase_auth:
            - write:posts
            - read:posts
    delete:
      tags:
        - post
      summary: Deletes a post
      description: delete a post
      operationId: deletePost
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: postId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid post value
      security:
        - postdatabase_auth:
            - write:posts
            - read:posts
components:
  schemas:
    Posts:
      required:
        type: array
        items:
          $ref: null
        xml:
          name: posts
    Post:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Great Title
        content:
          type: string
          description: the content of the post
        status:
          type: string
          description: post status in the database
          enum:
            - draft
            - published
      xml:
        name: post
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Post:
      description: Post object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
        application/xml:
          schema:
            $ref: '#/components/schemas/Post'
  securitySchemes:
    postdatabase_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://postdatabase3.swagger.io/oauth/authorize
          scopes:
            write:posts: modify posts in your account
            read:posts: read your posts
    api_key:
      type: apiKey
      name: api_key
      in: header

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: cloudformation template for Practera Cloud Projects web app +auth + cognito infrastructure

Metadata:
  Authors:
    Description: Based on AWS best practise.
  License:
    Description: Copyright 2023 Intersective PTY LTD and its affiliates. All Rights
      Reserved.

Parameters:
  StackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: ""
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
  AuthStackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: ""
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
  Env:
    Description: Environment type.
    Default: dev
    Type: String
    ConstraintDescription: must specify dev,test,live.

  ## ARE THESE USED?
  CURRENTREGION:
    Default: us-east-1
    Description: The AWS Region where the Cloudformation template stored in S3 bucket
      is hosted. When using your own bucket, you must specify this value.
    Type: String
  CFNS3BucketName:
    Description: S3 bucket name for the Cloudformation template stored. This string
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Default: pcloud-cfn-templates-dev
    Type: String
  CFNS3BucketRegion:
    Default: us-east-1
    Description: The AWS Region where the Cloudformation template stored in S3 bucket
      is hosted. When using your own bucket, you must specify this value.
    Type: String

  ## You are unlikely to want to override these parameters
  SemanticVersion:
    Type: String
    Description: Semantic version of the back end
    Default: 2.1.5
  HttpHeaders:
    Type: String
    Description: The HTTP headers to set on all responses from CloudFront. Defaults are illustrations only and contain a report-only Cloud Security Policy -- adjust for your application
    Default: >-
      {
        "Content-Security-Policy-Report-Only": "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; connect-src 'self' https://*.amazonaws.com https://*.amazoncognito.com",
        "Strict-Transport-Security": "max-age=31536000; includeSubdomains; preload",
        "Referrer-Policy": "same-origin",
        "X-XSS-Protection": "1; mode=block",
        "X-Frame-Options": "DENY",
        "X-Content-Type-Options": "nosniff"
      }
  AppStackPostfix:
    Description: 'Appended to the stack name to denote the app stacks'
    Type: String
    Default: app
  RootDomainName:
    Description: 'The root domain name used for the sites'
    Type: String
    Default: pcloud.practeraco.de


Resources:

  Route53RecordV2:
    DependsOn: [DocusaurusCloudFrontDistribution]
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId:  {'Fn::ImportValue': !Sub '${AuthStackName}-HostedZoneId-${Env}'}
      RecordSets:
      - Name: !Sub '${StackName}-${AppStackPostfix}.${RootDomainName}'
        Type: CNAME
        TTL: '3200'
        ResourceRecords:
          - !GetAtt 'DocusaurusCloudFrontDistribution.DomainName'

  DocusaurusS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub '${StackName}-${AppStackPostfix}'
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - NoncurrentVersionExpirationInDays: 30
          Status: Enabled

  ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
  DocusaurusS3BucketPolicy:
    DependsOn: [DocusaurusCloudFrontOriginAccessIdentity]
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DocusaurusS3Bucket
      PolicyDocument:
        Statement:
        - Sid: S3-Bucket-Accesible via CDN OAI only
          Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${DocusaurusS3Bucket}/*'
          Principal:
            CanonicalUser: !GetAtt DocusaurusCloudFrontOriginAccessIdentity.S3CanonicalUserId 
        - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !Sub 'arn:aws:s3:::${DocusaurusS3Bucket}'
          - !Sub 'arn:aws:s3:::${DocusaurusS3Bucket}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false

  ## Specifying the CloudFront Origin Access Identity CDN Distribution to server your Web Application
  DocusaurusCloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Cloudfront Origin identity for DocusaurusS3BUCKET"

  ## Specifying the CloudFront Distribution to server your Web Application
  DocusaurusCloudFrontDistribution:
    DependsOn: [DocusaurusCloudFrontSecurityHeaderResponse]
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Sub '${StackName}-${AppStackPostfix}.${RootDomainName}'
        Comment: "Cloudfront Origin identity for DocusaurusS3BUCKET"
        CacheBehaviors:
          - PathPattern: /parseauth
            Compress: true
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.ParseAuthHandler
            TargetOriginId: dummy-origin
            ViewerProtocolPolicy: redirect-to-https
          - PathPattern: /refreshauth
            Compress: true
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.RefreshAuthHandler
            TargetOriginId: dummy-origin
            ViewerProtocolPolicy: redirect-to-https
          - PathPattern: /signout
            Compress: true
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.SignOutHandler
            TargetOriginId: dummy-origin
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: true
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.CheckAuthHandler
            - EventType: origin-response
              LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.HttpHeadersHandler
          TargetOriginId: !Sub '${StackName}-${AppStackPostfix}'
          ViewerProtocolPolicy: 'redirect-to-https'
          ResponseHeadersPolicyId: !Ref DocusaurusCloudFrontSecurityHeaderResponse
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /404.html
          # - ErrorCode: 403
          #   ResponseCode: 200
          #   ResponsePagePath: /index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt 'DocusaurusS3Bucket.RegionalDomainName'
            Id: !Sub '${StackName}-${AppStackPostfix}'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${DocusaurusCloudFrontOriginAccessIdentity}'
          # - DomainName: example.org # Dummy origin is used for Lambda@Edge functions, keep this as-is
          - DomainName: !GetAtt 'DocusaurusS3Bucket.RegionalDomainName'
            Id: dummy-origin
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: {'Fn::ImportValue': !Sub '${AuthStackName}-CertificateArn-${Env}'}
          MinimumProtocolVersion: 'TLSv1.2_2021'  # OLD VALUE:'TLSv1.2_2019'
          SslSupportMethod: 'sni-only'

  # Specifying the CloudFront Distribution Security Response Header
  DocusaurusCloudFrontSecurityHeaderResponse:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties: 
      ResponseHeadersPolicyConfig: 
        Comment: "practera-security-headers-for-DocusaurusS3BUCKET"
        Name: !Sub '${StackName}-security-headers-${Env}'
        SecurityHeadersConfig: 
          StrictTransportSecurity: 
            AccessControlMaxAgeSec: 31536000
            IncludeSubdomains: true
            Override: true
            Preload: true

  LambdaEdgeProtection:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:520945424137:applications/cloudfront-authorization-at-edge
        SemanticVersion: !Ref SemanticVersion
      Parameters:
        CreateCloudFrontDistribution: "false"
        HttpHeaders: !Ref HttpHeaders
        AlternateDomainNames: !Sub '${StackName}-${AppStackPostfix}.${RootDomainName}'
        UserPoolArn: {'Fn::ImportValue': !Sub '${AuthStackName}-UserPoolArn-${Env}'}
        UserPoolClientId: {'Fn::ImportValue': !Sub '${AuthStackName}-UserPoolClientId-${Env}'}
        EnableSPAMode: {'Fn::ImportValue': !Sub '${AuthStackName}-EnableSPAMode-${Env}'}
        OAuthScopes: {'Fn::ImportValue': !Sub '${AuthStackName}-OAuthScopes-${Env}'}

Outputs:
  DocusaurusS3Bucket:
    Description: 'Name of the S3 bucket storing the static files.'
    Value: !Ref DocusaurusS3Bucket
    Export:
      Name: !Sub '${StackName}-DocusaurusS3Bucket-${Env}'

  DocusaurusS3BucketURL:
    Description: 'URL to static website.'
    Value: !Sub '${StackName}-${AppStackPostfix}'
    Export:
      Name: !Sub '${StackName}-DocusaurusS3BucketURL-${Env}'

  DocusaurusCloudFrontDistributionID:
    Description: 'CloudFront distribution id'
    Value: !Ref DocusaurusCloudFrontDistribution
    Export:
      Name: !Sub '${StackName}-DocusaurusCloudFrontDistributionID-${Env}'

  DocusaurusCloudFrontDistributionOutput:
    Value:
      'Fn::GetAtt': [ DocusaurusCloudFrontDistribution, DomainName ]
    Export:
      Name: !Sub '${StackName}-DocusaurusCloudFrontDistributionOutput-${Env}'

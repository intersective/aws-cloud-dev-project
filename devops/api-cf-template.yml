AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A sample Node.js-based API service on AWS Lambda and API Gateway
Parameters:
  S3BUCKET:
    Description: 'Required. Bucket for artifacts'
    Type: 'String'
 
Resources:
##########################################################################
#   DynamoDB                                                            #
##########################################################################
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: postId
          AttributeType: S
      KeySchema:
        - AttributeName: postId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
     
##########################################################################
#   Lambda Function                                                      #
##########################################################################

  APIGetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub "${S3BUCKET}"
        Key: deployment-packages/deployment-package.zip
      Handler: dist/api.getAllPosts
      Runtime: nodejs16.x
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: posts
            Method: GET
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoTable
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoTable

  APIGetPostsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - APIGetPostsFunction
        - Arn
      Principal: "apigateway.amazonaws.com"

  APIGetPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub "${S3BUCKET}"
        Key: deployment-packages/deployment-package.zip
      Handler: dist/api.getPost
      Runtime: nodejs16.x
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: post/{postId}
            Method: GET
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoTable
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoTable

  APIGetPostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - APIGetPostFunction
        - Arn      
      Principal: "apigateway.amazonaws.com"

  APICreatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub "${S3BUCKET}"
        Key: deployment-packages/deployment-package.zip
      Handler: dist/api.createPost
      Runtime: nodejs16.x
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: post
            Method: POST
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoTable
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable

  APICreatePostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      FunctionName: !GetAtt
        - APICreatePostFunction
        - Arn

  APIUpdatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub "${S3BUCKET}"
        Key: deployment-packages/deployment-package.zip
      Handler: dist/api.updatePost
      Runtime: nodejs16.x
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: post/{postId}
            Method: PUT
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoTable
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable

  APIUpdatePostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - APIUpdatePostFunction
        - Arn
      Principal: "apigateway.amazonaws.com"
      # SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"

  APIDeletePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Sub "${S3BUCKET}"
        Key: deployment-packages/deployment-package.zip
      Handler: dist/api.deletePost
      Runtime: nodejs16.x
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: post/{postId}
            Method: DELETE
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoTable
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable

  APIDeletePostPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - APIDeletePostFunction
        - Arn
      Principal: "apigateway.amazonaws.com"



##########################################################################
#   OUTPUTS                                                              #
##########################################################################
  
Outputs:
  ApiGatewayUrl:
    Description: "API Gateway base URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  DynamoDbTable:
    Value: !Ref DynamoTable
    Description: DynamoDb Table 
